// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "GunTour/features/booking/domain"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: idBooking
func (_m *Repository) Delete(idBooking uint) error {
	ret := _m.Called(idBooking)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(idBooking)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: idUser
func (_m *Repository) Get(idUser uint) ([]domain.Core, error) {
	ret := _m.Called(idUser)

	var r0 []domain.Core
	if rf, ok := ret.Get(0).(func(uint) []domain.Core); ok {
		r0 = rf(idUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(idUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCode provides a mock function with given fields:
func (_m *Repository) GetCode() (domain.Code, error) {
	ret := _m.Called()

	var r0 domain.Code
	if rf, ok := ret.Get(0).(func() domain.Code); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.Code)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailData provides a mock function with given fields: userPen, userRan
func (_m *Repository) GetEmailData(userPen int, userRan int) (domain.Pendaki, domain.Ranger) {
	ret := _m.Called(userPen, userRan)

	var r0 domain.Pendaki
	if rf, ok := ret.Get(0).(func(int, int) domain.Pendaki); ok {
		r0 = rf(userPen, userRan)
	} else {
		r0 = ret.Get(0).(domain.Pendaki)
	}

	var r1 domain.Ranger
	if rf, ok := ret.Get(1).(func(int, int) domain.Ranger); ok {
		r1 = rf(userPen, userRan)
	} else {
		r1 = ret.Get(1).(domain.Ranger)
	}

	return r0, r1
}

// GetID provides a mock function with given fields: idBooking
func (_m *Repository) GetID(idBooking uint) (domain.Core, error) {
	ret := _m.Called(idBooking)

	var r0 domain.Core
	if rf, ok := ret.Get(0).(func(uint) domain.Core); ok {
		r0 = rf(idBooking)
	} else {
		r0 = ret.Get(0).(domain.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(idBooking)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRanger provides a mock function with given fields: idRanger
func (_m *Repository) GetRanger(idRanger uint) ([]domain.Core, error) {
	ret := _m.Called(idRanger)

	var r0 []domain.Core
	if rf, ok := ret.Get(0).(func(uint) []domain.Core); ok {
		r0 = rf(idRanger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(idRanger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: newBooking
func (_m *Repository) Insert(newBooking domain.Core) (domain.Core, error) {
	ret := _m.Called(newBooking)

	var r0 domain.Core
	if rf, ok := ret.Get(0).(func(domain.Core) domain.Core); ok {
		r0 = rf(newBooking)
	} else {
		r0 = ret.Get(0).(domain.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Core) error); ok {
		r1 = rf(newBooking)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: newBooking
func (_m *Repository) Update(newBooking domain.Core) (domain.Core, error) {
	ret := _m.Called(newBooking)

	var r0 domain.Core
	if rf, ok := ret.Get(0).(func(domain.Core) domain.Core); ok {
		r0 = rf(newBooking)
	} else {
		r0 = ret.Get(0).(domain.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Core) error); ok {
		r1 = rf(newBooking)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMidtrans provides a mock function with given fields: newBooking
func (_m *Repository) UpdateMidtrans(newBooking domain.Core) error {
	ret := _m.Called(newBooking)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Core) error); ok {
		r0 = rf(newBooking)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
